@page
@model task.Pages.Leave.ApplyLeaveModel
@{
}

<h1>Apply Leave</h1>

<form method="post" class="w-50 container bg-warning rounded p-3">

    <div class="form-group row mt-3">
        @Html.Label("startDate", "Start Date", new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">

            @Html.TextBoxFor(m => m.startDate, new { @type = "date", @id = "startDate", @name = "startDate", @class = "form-control" })
        </div>
    </div>

    <div class="form-group row mt-3">
        @Html.Label("endDate", "End Date", new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => m.endDate, new { @type = "date", @id = "endDate", @name = "endDate", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.endDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row mt-3">
        @Html.LabelFor(m => m.duration, new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => m.duration, new { @class = "form-control", placeholder = "Duration", @readonly = "readonly" })
            @Html.ValidationMessageFor(m => m.duration, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row mt-3">
        @Html.LabelFor(m => m.reason, "Reason", new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">
            @Html.TextAreaFor(m => m.reason, new { @class = "form-control", placeholder = "Reason" })
            @Html.ValidationMessageFor(m => m.reason, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group row mt-3">
        @Html.LabelFor(m => m.LeaveCategory, "Select Leave Category", new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">
            @Html.DropDownListFor(m => m.LeaveCategory, new SelectList(Model.LeaveCategories), "Select Leave Category", new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.LeaveCategory, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row mt-3" id="documentUploadGroup">
        @Html.LabelFor(m => m.documents, "Documents", new { @class = "col-sm-2 control-label" })
        <div class="col-sm-10">
            <input type="file" id="Documents" name="Documents" class="form-control" />
            @Html.ValidationMessageFor(m => m.documents, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group row mt-3">
        <div class="col-sm-12 d-flex justify-content-center">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </div>

</form>

@section Scripts {
    <script>
        $(function () {
            toggleDocumentUpload();

            $('#leaveCategoryId').change(function () {
                toggleDocumentUpload();
            });
        });

        function toggleDocumentUpload() {
            var leaveCategoryId = $('#leaveCategoryId').val();
            var leaveCategories = @Html.Raw(Json.Serialize(Model.LeaveCategories));
            var selectedCategory = leaveCategories.find(c => c.id == leaveCategoryId);

            if (selectedCategory && selectedCategory.isDocumentRequired) {
                $('#documentUploadGroup').show();
            } else {
                $('#documentUploadGroup').hide();
            }
        }
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $('#startDate, #endDate').change(function () {
                var startDate = new Date($('#startDate').val());
                var endDate = new Date($('#endDate').val());

                if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {
                    var diffTime = Math.abs(endDate.getTime() - startDate.getTime());
                    var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                    var years = Math.floor(diffDays / 365);
                    var months = Math.floor((diffDays % 365) / 30);
                    var days = diffDays % 30;

                    var durationString = '';
                    if (years > 0) {
                        durationString += years + (years > 1 ? ' years ' : ' year ');
                    }
                    if (months > 0) {
                        durationString += months + (months > 1 ? ' months ' : ' month ');
                    }
                    if (days > 0) {
                        durationString += days + (days > 1 ? ' days' : ' day');
                    }

                    $('#duration').val(durationString.trim());
                }
            });
        });
    </script>
}